{-# LANGUAGE TemplateHaskell #-}
{-# OPTIONS -fno-warn-orphans #-}

module Language.Haskell.Modules.Orphans () where

import Data.Default (Default(def))
import Data.Graph.Inductive as G (empty, Gr)
import Data.Monoid ((<>))
import Instances.TH.Lift ()
import Language.Haskell.Exts.Comments (Comment(..))
import Language.Haskell.Exts.SrcLoc
import Language.Haskell.Exts.Syntax
import Language.Haskell.Interpreter as Hint (ModuleElem(..))
import Language.Haskell.Names -- (Scoped(..), Symbol(..))
import Language.Haskell.TH.Lift (deriveLift)
import Text.PrettyPrint.HughesPJClass (Pretty(pPrint), text)

instance Pretty SrcLoc where
    pPrint l = text ("(l" <> show (srcLine l) ++ ",c" ++ show (srcColumn l) ++ ")")

instance Pretty SrcSpan where
    pPrint (SrcSpan _ bl bc el ec) = text ("(l" <> show bl ++ ",c" ++ show bc ++ ")->" ++
                                           "(l" <> show el ++ ",c" ++ show ec ++ ")")

instance Pretty SrcSpanInfo where
    pPrint = pPrint . srcInfoSpan

instance Default (G.Gr a b) where
  def = G.empty


$(deriveLift ''ModuleElem)

$(deriveLift ''ModuleHead)
$(deriveLift ''Module)
$(deriveLift ''ModuleName)
$(deriveLift ''Name)
$(deriveLift ''WarningText)
$(deriveLift ''ModulePragma)
$(deriveLift ''QName)
$(deriveLift ''ExportSpecList)
$(deriveLift ''ImportDecl)
$(deriveLift ''Decl)
$(deriveLift ''SpecialCon)
$(deriveLift ''Comment)
$(deriveLift ''ExportSpec)
$(deriveLift ''ImportSpecList)
$(deriveLift ''XName)
$(deriveLift ''Annotation)
$(deriveLift ''XAttr)
$(deriveLift ''Tool)
$(deriveLift ''SrcSpanInfo)
$(deriveLift ''DeclHead)
$(deriveLift ''SrcSpan)
$(deriveLift ''SrcLoc)
$(deriveLift ''Namespace)
$(deriveLift ''ImportSpec)
$(deriveLift ''Exp)
$(deriveLift ''Type)
$(deriveLift ''ResultSig)
$(deriveLift ''Boxed)
$(deriveLift ''EWildcard)
$(deriveLift ''CName)
$(deriveLift ''IPName)
$(deriveLift ''TyVarBind)
$(deriveLift ''InjectivityInfo)
$(deriveLift ''Literal)
$(deriveLift ''Context)
$(deriveLift ''Kind)
$(deriveLift ''TypeEqn)
$(deriveLift ''QOp)
$(deriveLift ''MaybePromotedName)
$(deriveLift ''Asst)
$(deriveLift ''DataOrNew)
$(deriveLift ''Pat)
$(deriveLift ''Promoted)
$(deriveLift ''QualConDecl)
$(deriveLift ''Binds)
$(deriveLift ''Splice)
$(deriveLift ''Sign)
$(deriveLift ''Deriving)
$(deriveLift ''GuardedRhs)
$(deriveLift ''BangType)
$(deriveLift ''PatField)
$(deriveLift ''ConDecl)
$(deriveLift ''IPBind)
$(deriveLift ''GadtDecl)
$(deriveLift ''Alt)
$(deriveLift ''Unpackedness)
$(deriveLift ''RPat)
$(deriveLift ''DerivStrategy)
$(deriveLift ''Stmt)
$(deriveLift ''FieldDecl)
$(deriveLift ''FunDep)
$(deriveLift ''FieldUpdate)
$(deriveLift ''PXAttr)
$(deriveLift ''InstRule)
$(deriveLift ''Rhs)
$(deriveLift ''RPatOp)
$(deriveLift ''ClassDecl)
$(deriveLift ''QualStmt)
$(deriveLift ''InstHead)
$(deriveLift ''Overlap)
$(deriveLift ''Bracket)
$(deriveLift ''InstDecl)
$(deriveLift ''Assoc)
$(deriveLift ''Op)
$(deriveLift ''Match)
$(deriveLift ''PatternSynDirection)
$(deriveLift ''CallConv)
$(deriveLift ''Safety)
$(deriveLift ''Rule)
$(deriveLift ''Activation)
$(deriveLift ''BooleanFormula)
$(deriveLift ''RuleVar)
$(deriveLift ''Role)

$(deriveLift ''Symbol)
$(deriveLift ''Scoped)
$(deriveLift ''NameInfo)
$(deriveLift ''Error)
